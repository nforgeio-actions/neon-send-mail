#------------------------------------------------------------------------------
# Sends an email from the current user's O365 account.  This requires that the
# account's master 1Password be present as the MASTER_PASSWORD environment
# variable.

name: neon-send-mail
description: Sends an email via Office 365.
inputs:
  to: 
    description: Target email addresses separated by commas.
    required: true
  subject: 
    description: The subject line
    required: true
  cc:
    description: Optional CC email addresses separated by commas.
    required: false
  bcc:
    description: Optional BCC address separated by commas.
    required: false
  body:
    description: Optional email body text.
    required: false
    default: ""
  bodyAsHtml: 
    description: Optionally indicates that the body text is HTML.
    required: false
    default: false
  attachment0:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""  
  attachment1:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment2:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment3:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment4:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment5:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment6:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment7:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment8:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
  attachment9:
    description: Optionally specifies the path to an attachment file.
    required: false
    default: ""
runs:
  using: composite
  steps:
  - shell: pwsh
    run: |

      # Pick up the deployment related functions
        
      . $env:NC_ROOT/Powershell/deployment.ps1
      
      # Fetch the credentials
      
      $masterPassword = $env:MASTER_PASSWORD

      if ($masterPassword -eq $null)
      {
          throw "MASTER_PASSWORD is required."
      }

      $username    = GetSecretValue "NEONFORGE_LOGIN[username]" -MasterPassword $masterPassword
      $password    = GetSecretPassword "SMTP_PASSWORD" -MasterPassword $masterPassword
      $credentials = New-Object -TypeName System.Net.NetworkCredential -ArgumentList $username, $password
      
      # Fetch the parameters
      
      $to          = "${{ inputs.to }}"
      $cc          = "${{ inputs.cc }}"
      $bcc         = "${{ inputs.bcc }}"
      $subject     = "${{ inputs.subject }}"
      $body        = "${{ inputs.body }}"
      $bodyAsHtml  = "${{ inputs.bodyAsHtml }}"
      $attachment0 = "${{ inputs.attachment0 }}"
      $attachment1 = "${{ inputs.attachment1 }}"
      $attachment2 = "${{ inputs.attachment2 }}"
      $attachment3 = "${{ inputs.attachment3 }}"
      $attachment4 = "${{ inputs.attachment4 }}"
      $attachment5 = "${{ inputs.attachment5 }}"
      $attachment6 = "${{ inputs.attachment6 }}"
      $attachment7 = "${{ inputs.attachment7 }}"
      $attachment8 = "${{ inputs.attachment8 }}"
      $attachment9 = "${{ inputs.attachment9 }}"
     
      # Construct the email message

      $message = New-Object System.Net.Mail.MailMessage
      
      if ([System.String]::IsNullOrEmpty($to))
      {
          throw "The [to] argument cannot be null or empty."
      }
        
      ForEach ($address in $to.Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))
      {
          $address = $address.Trim()
          if ($address -ne "")
          {
              $address = New-Object -TypeName System.Net.Mail.MailAddress -ArgumentList $address
              $message.To.Add($address)
          }
      }
      
      if (![System.String]::IsNullOrEmpty($cc))
      {
          ForEach ($address in $cc.Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))
          {
              $address = $address.Trim()
              if ($address -ne "")
              {
                  $address = New-Object -TypeName System.Net.Mail.MailAddress -ArgumentList $address
                  $message.CC.Add($address)
              }
          }
      }
      
      if (![System.String]::IsNullOrEmpty($bcc))
      {
          ForEach ($address in $bcc.Split(",", [System.StringSplitOptions]::RemoveEmptyEntries))
          {
              $address = $address.Trim()
              if ($address -ne "")
              {
                  $address = New-Object -TypeName System.Net.Mail.MailAddress -ArgumentList $address
                  $message.Bcc.Add($address)
              }
          }
      }
      
      $message.From       = New-Object -TypeName System.Net.Mail.MailAddress -ArgumentList $username
      $message.Subject    = $subject
      $message.Body       = $body
      $message.IsBodyHtml = $bodyAsHtml
      
      # Add any attachments
      
      $attachments = New-Object -TypeName System.Collections.ArrayList
      
      function AddAttachment
      { 
          [CmdletBinding()]
          param (
              [Parameter(Position=0, Mandatory=1)]
              [string]$attachmentPath
          )
          
          if (![System.String]::IsNullOrEmpty($attachmentPath))
          {
              $fileMode         = [System.IO.FileMode]::Open
              $fileAccess       = [System.IO.FileAccess]::Read
              $stream           = New-Object -TypeName System.IO.FileStream -ArgumentList $attachmentPath, $fileMode, $fileAccess
              $contentType      = New-Object -TypeName System.Net.Mime.ContentType
              $contentType.Name = [System.IO.Path]::GetFileName($attachmentPath)
              $attachment       = New-Object -TypeName System.Net.Mail.Attachment -ArgumentList $stream, $contentType
              
              $message.Attachments.Add($attachment)
              $attachments.Add($attachment)
          }
      }
      
      AddAttachment $attachment0
      AddAttachment $attachment1
      AddAttachment $attachment2
      AddAttachment $attachment3
      AddAttachment $attachment4
      AddAttachment $attachment5
      AddAttachment $attachment6
      AddAttachment $attachment7
      AddAttachment $attachment8
      AddAttachment $attachment9

      # Send the message
        
      $smtp             = New-Object Net.Mail.SmtpClient("smtp.office365.com", 587)
      $smtp.Credentials = $credentials
      $smtp.EnableSsl   = $true
      $smtp.Send($message)
      
      # Cleanup by disposing any attachments
      
      ForEach ($attachment in $attachments)
      {
          $attachment.Dispose()
      }
 
